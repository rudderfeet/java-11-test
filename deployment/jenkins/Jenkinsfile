pipeline {

    // Common properties used in the stages below
    environment {
        REGISTRY = "scottmccrory/java-11-test"
        DOCKERFILE = "./Dockerfile"
        REGISTRYCREDENTIAL = 'dockerhub'
    } 

    agent {
        dockerfile {
            filename 'Dockerfile-build'
            args '-v $HOME/.m2:/root/.m2'
        }
    }

    // Define the stages this build must go through
    stages {

        stage('Get Application Sources') {

            steps {
                // Clone/pull the latest code
                git 'https://github.com/rudderfeet/java-11-test.git'
            }

        }

        stage('Build and Test Application') {

            tools {
                // Require a Maven installation with the following label
                maven 'Maven3'
            }

            steps {
                // Typical Maven rebuild and test operation
                sh 'mvn clean verify'
            }

        }

        stage('Build Docker Image') {

            steps {
                script {
                    // Build the image with the Dockerfile specified in properties above
                    docker.build(REGISTRY, "-f ${DOCKERFILE} .")
                }
            }

        }

        stage('Push Docker Image to Repo') {

            steps {

                script {
                    docker.withRegistry('', REGISTRYCREDENTIAL ) {
                        // With the specified Docker Hub rep and credentials, push the latest image
                        sh "docker push $REGISTRY"
                    }
                }

            }

        }

        stage('Remove Unused Docker Image') {

            steps{
                // Clean up the build image from the local registry since we're only using it for builds
                sh "docker rmi $REGISTRY"
            }

        }

        //stage('Apply deployment to k3s cluster') {

            //steps{
                // Finally point to the kubernetes cluster referenced by /home/pi/kubeconfig
                // and apply the deployment with the updated image, a la CI/CD!
                //sh "export KUBECONFIG=/home/pi/kubeconfig ; kubectl apply -f ./deployment/kubectl/deployment.yaml"
            //}

        //}

    }

}