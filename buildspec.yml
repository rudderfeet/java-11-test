version: 0.2

# See https://aws.amazon.com/blogs/devops/build-a-continuous-delivery-pipeline-for-your-container-images-with-amazon-ecr-as-source/
# and https://www.captechconsulting.com/blogs/aws-codepipeline-for-containerized-deployments

eb_codebuild_settings:
  CodeBuildServiceRole: arn:aws:iam::770629738917:role/service-role/codebuild-java-11-test-service-role
  ComputeType: BUILD_GENERAL1_SMALL
  Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
  Timeout: 5
phases:
  install:
    commands:
      # Install and run Docker to build the image
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build: 
    commands: 
      # Login to Amazon Container Registry to access this project's repository
      - echo Logging in to Amazon ECR....
      - aws --version
      - AWS_ACCOUNT_ID=770629738917
      - IMAGE_REPO_NAME=java-11-test
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME 
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION) 
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7) 
      - IMAGE_TAG=${COMMIT_HASH:=latest}  
  build:
    commands:
      - echo Build started on `date`
      - mvn package
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build: 
    commands: 
      - echo Build completed on `date` 
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Image push completed.
      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE_REPO_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json 
      - cat imagedefinitions.json
artifacts:
  files:
    - Dockerrun.aws.json
    - imagedefinitions.json